package com.sodi9.common.item;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RestController // This means that this class is a Controller
@RequestMapping(path = "/api/item") // This means URL's start with /api (after Application path)
public class ItemRestController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private ItemRepository repository;

	@PostMapping // Map ONLY POST Requests
	public @ResponseBody String addNewUser(@RequestParam String name, @RequestParam String email) {
// @ResponseBody means the returned String is the response, not a view name
// @RequestParam means it is a parameter from the GET or POST request

		Item n = new Item();
		n.setName(name);
		repository.save(n);
		return "Saved";
	}

	@GetMapping
	public Iterable<Item> getAllUsers() {
// This returns a JSON or XML with the users

//		List<String> list = new ArrayList<>();
//		list.add("성부");
//		list.add("성자");
//		list.add("성령");
//		Iterable <Item>  list = repository.findAll();
		return repository.findAll();
	}

//    @GetMapping("/{id}")
//    public ProductPojo getById(@PathVariable Long id) {
//        return productService.getByID(id);
//    }
//
//    @GetMapping
//    public Iterable<ProductPojo> getAll() {
//        return productService.getAll();
//    }
//
//    @PostMapping
//    public ProductPojo createProduct(@RequestBody ProductPojo product) {
//        return productService.createProduct(product);
//    }
//
//    @PutMapping
//    public ProductPojo update(@RequestBody ProductPojo product) {
//        return productService.update(product);
//
//    }
//
//    @DeleteMapping("/{id}")
//    public String remove(@PathVariable Long id) {
//        productService.remove(id);
//        return "Record delete successfully";
//    }

}
