package com.sodi9.common.order;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.sodi9.common.cart.CartRepository;
import com.sodi9.common.service.JwtService;

@RestController // This means that this class is a Controller
@RequestMapping(path = "/api/orders") // This means URL's start with /api (after Application path)
public class OrderRestController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private OrderRepository orderRepository;

	@Autowired
	CartRepository cartRepository;

	@Autowired
	JwtService jwtService;

	@GetMapping
	public ResponseEntity<List<Orders>> getOrder(
			@CookieValue(required = false) String token) {

		if (!jwtService.isValid(token)) {
			throw new ResponseStatusException(HttpStatus.UNAUTHORIZED);
		}

		int memberId = jwtService.getId(token);
		List<Orders> orders = orderRepository.findByMemberIdOrderByIdDesc(memberId);
		return new ResponseEntity<>(orders, HttpStatus.OK);
	}

	@Transactional
	@PostMapping // Map ONLY POST Requests
	public ResponseEntity<Object> pushOrder(
			@RequestBody Orders dto,
			@CookieValue(required = false) String token) {

		if (!jwtService.isValid(token)) {
			throw new ResponseStatusException(HttpStatus.UNAUTHORIZED);
		}

		int memberId = jwtService.getId(token);
		Orders newOrder = new Orders();

		newOrder.setMemberId(memberId);
		newOrder.setName(dto.getName());
		newOrder.setAddress(dto.getAddress());
		newOrder.setPayment(dto.getPayment());
		newOrder.setCardNumber(dto.getCardNumber());
		newOrder.setItems(dto.getItems());

		orderRepository.save(newOrder);
		cartRepository.deleteByMemberId(memberId);

		return new ResponseEntity<>(HttpStatus.OK);
	}

	
	
	
//    @GetMapping("/{id}")
//    public ProductPojo getById(@PathVariable Long id) {
//        return productService.getByID(id);
//    }
//
//    @GetMapping
//    public Iterable<ProductPojo> getAll() {
//        return productService.getAll();
//    }
//
//    @PostMapping
//    public ProductPojo createProduct(@RequestBody ProductPojo product) {
//        return productService.createProduct(product);
//    }
//
//    @PutMapping
//    public ProductPojo update(@RequestBody ProductPojo product) {
//        return productService.update(product);
//
//    }
//
//    @DeleteMapping("/{id}")
//    public String remove(@PathVariable Long id) {
//        productService.remove(id);
//        return "Record delete successfully";
//    }

}
