package com.sodi9.common.home;

import java.util.Collections;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.sodi9.common.member.Member;
import com.sodi9.common.member.MemberRepository;

import io.jsonwebtoken.Claims;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

@RestController // This means that this class is a @RestController
//@RequestMapping(path = "/api") // This means URL's start with /api (after Application path)
public class HomeRestController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private HomeRepository homeRepository;

	@Autowired // This means to get the bean called MemberRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private MemberRepository memberRepository;


	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private JwtService jwtService;
	
	
	
	
	@GetMapping("/")
	public String index() {
		return "Greetings from Spring Boot!";
	}

	@RequestMapping("/token")
	public Map<String, String> token(HttpSession session) {
		return Collections.singletonMap("token", session.getId());
	}

	@PostMapping("/auth/login")
	public ResponseEntity<Integer> login(
//			HttpSession session, 
			@RequestBody Map<String, String> params,
			HttpServletResponse res) {
		
		Member member = memberRepository.findByEmailAndPassword(params.get("email"), params.get("password"));
		if (member !=null) {
            Integer id = member.getId();
			String token = jwtService.getToken("id", id);

            Cookie cookie = new Cookie("token", token);
            cookie.setHttpOnly(true);
            cookie.setPath("/");
            int maxAge = 1000 * 60 * 30;// 30ë¶„
			cookie.setMaxAge(maxAge );
            res.addCookie(cookie);
			
//			return member.getId();
            return new ResponseEntity<>(id, HttpStatus.OK);
		}
		
		throw new ResponseStatusException(HttpStatus.NOT_FOUND);
//		return 0;
//		return Collections.singletonMap("token", session.getId());
	}
	@PostMapping("/auth/signup")
	public int signup(
//			HttpSession session, 
			@RequestBody Map<String, String> params) {
		
		Member member = memberRepository.findByEmailAndPassword(params.get("email"), params.get("password"));
		if (member !=null) {
			return member.getId();
		}
		
		throw new ResponseStatusException(HttpStatus.NOT_FOUND);
//		return 0;
//		return Collections.singletonMap("token", session.getId());
	}
	
	

    @PostMapping("/api/logout")
    public ResponseEntity logout(HttpServletResponse res) {
        Cookie cookie = new Cookie("token", null);
        cookie.setPath("/");
        cookie.setMaxAge(0);

        res.addCookie(cookie);
        return new ResponseEntity<>(HttpStatus.OK);
    }

    @GetMapping("/api/check")
    public ResponseEntity check(@CookieValue(value = "token", required = false) String token) {
        Claims claims = jwtService.getClaims(token);

        if (claims != null) {
            int id = Integer.parseInt(claims.get("id").toString());
            return new ResponseEntity<>(id, HttpStatus.OK);
        }

        return new ResponseEntity<>(null, HttpStatus.OK);
    }
}
